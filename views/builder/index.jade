extends ../layouts/main

block scripts

	//
		script var snippets = !{JSON.stringify(snippets)};
		script(src="/builder/js/codemirror/lib/codemirror.js")
		script(src="/builder/js/codemirror/mode/javascript/javascript.js")
		link(href="/builder/js/codemirror/lib/codemirror.css", rel="stylesheet")
		link(href="/builder/js/codemirror/theme/monokai.css", rel="stylesheet")

block main
	.clearfix.wrapper.builder

		div.header.clearfix
			h1 Download complete source

			.save
				a.button.highlighted(href='/builder')
					span
						| Download MooTools #{project}
						span.version Ver. #{version}
						span.icon.download(aria-hidden='true')

				label
					input(type="checkbox", name="minified", value="1")
					| Download minified source code

				label
					input(type="checkbox", name="compat", value="1")
					| Download with compat layer


		div.header.clearfix
			h1 Download your customized version
			
			h3 Choose which modules you want to use

		form(method="post", action="/builder")

			table
				tr
					td File
					td Provides
					td Description

				each yaml, module in dependencies
					tr
						td
							input(type="checkbox", name="#{module}", value="1", data-provides="#{yaml.prov}", data-requires="#{yaml.req}")
							| #{module}
						td #{yaml.prov}
						td #{yaml.desc}

			h2.step Options:

						
			.save

				label
					input(type="checkbox", name="minified", value="1")
					| Download minified source code

				label
					input(type="checkbox", name="compat", value="1")
					| Download with compat layer

				label
					a.button.highlighted(href='/builder')
						span
							| Download custom MooTools #{project}
							span.version Ver. #{version}
							span.icon.download(aria-hidden='true')

	.clearfix.wrapper.builder
		div.header.clearfix
			h2
				a(href="#") Download older versions of Mootools

	script
			(function(){
			
				var checkboxes = document.querySelectorAll('table input[type=checkbox]');
				var providerInput = {};
				var requireInput = {};
				for (var i = 0; i < checkboxes.length; i++){
					var data = getData(checkboxes[i]);
					data.provides.forEach(function(code){
						if (code) providerInput[code] = checkboxes[i];
					});
					data.requires.forEach(function(code){
						if (code) {
							if (!requireInput[code]) requireInput[code] = [];
							requireInput[code].push(checkboxes[i]);
						}
					});
					checkboxes[i].addEventListener('change', updateModules)
				};


				function updateModules(){
					var action = this.checked ? addDependency : removeDependency;
					var modules = getData(this)[this.checked ? 'requires' : 'provides'];
					for (var i = 0; i < modules.length; i++) if (modules[i]) action(modules[i]);

				}
				function addDependency(code){
					if (!providerInput[code]) return;
					providerInput[code].checked = true;
					updateModules.call(providerInput[code]);
				}
				function removeDependency(code){
					if (!requireInput[code]) return;
					requireInput[code].forEach(function(input){
						input.checked = false;
						updateModules.call(input);
					});
				}
				function getData(input){
					var provides = input.getAttribute('data-provides').split(', ');
					var requires = input.getAttribute('data-requires').split(', ');
					return {provides: provides, requires: requires};
				}
			})();


